input {
  http {
    host => "0.0.0.0"
    port => 8080
    codec => json
  }

  beats {
    port => 5044
    host => "0.0.0.0"
  }

  tcp {
    port => 5000
    codec => json_lines
    host => "0.0.0.0"
  }

  syslog {
    port => 514
    host => "0.0.0.0"
  }

  file {
    path => "/var/log/containers/*.log"
    start_position => "beginning"
    sincedb_path => "/dev/null"
    codec => json
  }
}

filter {
  if [message] {
    json {
      source => "message"
      target => "parsed"
      # on_error => "_jsonparsefailure"  # Uncomment if needed
    }
  }

  mutate {
    add_field => {
      "[@metadata][index_prefix]" => "devsecops-logs"
      "environment" => "%{[parsed][environment]}"
      "service_name" => "%{[parsed][service_name]}"
      "log_source" => "application"
    }
  }

  if [parsed][timestamp] {
    date {
      match => [ "[parsed][timestamp]", "ISO8601", "yyyy-MM-dd HH:mm:ss,SSS", "yyyy-MM-dd HH:mm:ss.SSS" ]
      target => "@timestamp"
    }
  } else if [@timestamp] {
    mutate {
      add_field => { "timestamp_source" => "logstash" }
    }
  }

  if [parsed][trace_id] {
    mutate {
      add_field => { "trace_id" => "%{[parsed][trace_id]}" }
    }
  }

  if [parsed][span_id] {
    mutate {
      add_field => { "span_id" => "%{[parsed][span_id]}" }
    }
  }

  if [parsed][levelname] {
    mutate {
      add_field => { "log_level" => "%{[parsed][levelname]}" }
      lowercase => [ "log_level" ]
    }
  } else if [parsed][level] {
    mutate {
      add_field => { "log_level" => "%{[parsed][level]}" }
      lowercase => [ "log_level" ]
    }
  }

  if [parsed][method] {
    mutate {
      add_field => {
        "http_method" => "%{[parsed][method]}"
        "http_path" => "%{[parsed][path]}"
        "http_status" => "%{[parsed][status_code]}"
        "response_time" => "%{[parsed][duration_ms]}"
      }
    }

    if [response_time] and [response_time] != "null" {
      mutate {
        convert => { "response_time" => "float" }
      }
    }

    if [http_status] and [http_status] != "null" {
      mutate {
        convert => { "http_status" => "integer" }
      }
    }
  }

  if [parsed][user_id] {
    mutate {
      add_field => { "user_id" => "%{[parsed][user_id]}" }
    }
  }

  if [parsed][error] or [parsed][exception] {
    mutate {
      add_field => {
        "error_message" => "%{[parsed][error]}"
        "exception_type" => "%{[parsed][exception]}"
        "has_error" => "true"
      }
    }
  } else {
    mutate {
      add_field => { "has_error" => "false" }
    }
  }

  if [parsed][remote_addr] and [parsed][remote_addr] != "127.0.0.1" and [parsed][remote_addr] != "localhost" {
    geoip {
      source => "[parsed][remote_addr]"
      target => "geoip"
    }
  }

  if [parsed][user_agent] {
    useragent {
      source => "[parsed][user_agent]"
      target => "user_agent"
    }
  }

  if [docker][container][name] {
    mutate {
      add_field => { "container_name" => "%{[docker][container][name]}" }
    }
  }

  # Fixed conditional logic
  if [service_name] == "%{[parsed][service_name]}" or ![service_name] {
    mutate {
      replace => { "service_name" => "unknown" }
    }
  }

  if [environment] == "%{[parsed][environment]}" or ![environment] {
    mutate {
      replace => { "environment" => "development" }
    }
  }

  mutate {
    remove_field => [ "message", "host", "@version", "[parsed][timestamp]" ]
  }
}

output {
  elasticsearch {
    hosts => ["elasticsearch:9200"]
    index => "%{[@metadata][index_prefix]}-%{+YYYY.MM.dd}"
#    template_name => "devsecops-logs"
#    template_pattern => "devsecops-logs-*"
#    template_overwrite => true
#    sniffing => false
#    manage_template => true
    retry_on_conflict => 3
    validate_after_inactivity => 200
    http_compression => true
  }

  # Dead letter queue for failed documents
  if "_jsonparsefailure" in [tags] {
    file {
      path => "/usr/share/logstash/data/failed_logs.log"
      codec => json_lines
    }
  }
}
