

services:
  postgres:
    image: postgres:15-alpine
    container_name: devsecops-postgres
    environment:
      POSTGRES_DB: devsecops_db
      POSTGRES_USER: devsecops_user
      POSTGRES_PASSWORD: secure_password_123
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/scripts/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "5432:5432"
    networks:
      - devsecops-network
      - elk-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U devsecops_user -d devsecops_db"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped

  db-migration:
    build:
      context: ./database
      dockerfile: Dockerfile.migration
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=devsecops_db
      - DB_USER=devsecops_user
      - DB_PASSWORD=secure_password_123
      - DOCKER_MODE=true
      - POSTGRES_CONTAINER=devsecops-postgres
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./database/scripts:/scripts
    networks:
      - devsecops-network
    command: ["/scripts/enhanced-migrate.sh"]
    restart: "no"

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: devsecops-backend
    environment:
      - DATABASE_URL=postgresql://devsecops_user:secure_password_123@postgres:5432/devsecops_db
      - DEBUG=false
      - HOST=0.0.0.0
      - PORT=5000
      - SECRET_KEY=dev-secret-key-change-in-production-$(date +%s)
      - ELASTICSEARCH_URL=http://elasticsearch:9200
      - LOGSTASH_HOST=logstash
      - LOGSTASH_PORT=5044
      - JAEGER_AGENT_HOST=jaeger
      - JAEGER_AGENT_PORT=6831
      - JAEGER_ENDPOINT=http://jaeger:14268/api/traces
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://jaeger:4317
      - OTEL_EXPORTER_OTLP_INSECURE=true
      - SERVICE_NAME=devsecops-backend
      - ENVIRONMENT=development
      - LOG_LEVEL=INFO
    ports:
      - "5000:5000"
    depends_on:
      - db-migration
      - postgres
      - elasticsearch
      - logstash
      - jaeger
    networks:
      - devsecops-network
      - elk-network
      - monitoring-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 120s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.10.0
    container_name: devsecops-elasticsearch
    environment:
      - node.name=devsecops-es-node
      - cluster.name=devsecops-elk-cluster
      - discovery.type=single-node
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms2g -Xmx2g"
      - xpack.monitoring.enabled=true
      - xpack.security.enabled=false
      - xpack.security.enrollment.enabled=false
      - action.auto_create_index=true
      - cluster.routing.allocation.disk.threshold_enabled=false
      - http.host=0.0.0.0
      - transport.host=0.0.0.0
      - network.host=0.0.0.0
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
      - "9300:9300"
    networks:
      - elk-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health?wait_for_status=yellow&timeout=30s || exit 1"]
      interval: 30s
      timeout: 30s
      retries: 10
      start_period: 120s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '2.0'
        reservations:
          memory: 2G
          cpus: '1.0'

  logstash:
    image: docker.elastic.co/logstash/logstash:8.10.0
    container_name: devsecops-logstash
    environment:
      - "LS_JAVA_OPTS=-Xms1g -Xmx1g"
      - PIPELINE_WORKERS=2
      - PIPELINE_BATCH_SIZE=125
      - PIPELINE_BATCH_DELAY=50
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    volumes:
      - ./observability/logstash/logstash.conf:/usr/share/logstash/pipeline/logstash.conf:ro
      - logstash_data:/usr/share/logstash/data
    ports:
      - "5044:5044"
      - "9600:9600"
      - "8082:8080"
    networks:
      - elk-network
      - devsecops-network
    depends_on:
      elasticsearch:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9600/_node/stats || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 10
      start_period: 120s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'

  kibana:
    image: docker.elastic.co/kibana/kibana:8.10.1
    container_name: devsecops-kibana
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      - SERVER_NAME=devsecops-kibana
      - SERVER_HOST=0.0.0.0
      - XPACK_SECURITY_ENABLED=false
      - XPACK_ENCRYPTEDSAVEDOBJECTS_ENCRYPTIONKEY=a7a6311933d3503b89bc2dbc36572c33a6c10925682e591bffcab6911c06786d
      - SERVER_BASEPATH=""
      - SERVER_REWRITEBASEPATH=false
    volumes:
      - kibana_data:/usr/share/kibana/data
    ports:
      - "5601:5601"
    networks:
      - elk-network
    depends_on:
      elasticsearch:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:5601/api/status || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 10
      start_period: 120s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'

  jaeger:
    image: jaegertracing/all-in-one:1.49
    container_name: devsecops-jaeger
    environment:
      - COLLECTOR_OTLP_ENABLED=true
      - SPAN_STORAGE_TYPE=elasticsearch
      - ES_SERVER_URLS=http://elasticsearch:9200
      - ES_CREATE_INDEX_TEMPLATES=true
      - ES_VERSION=8
      - QUERY_BASE_PATH=/
      - QUERY_LOG_LEVEL=info
      - COLLECTOR_ZIPKIN_HOST_PORT=:9411
      - COLLECTOR_OTLP_GRPC_HOST_PORT=0.0.0.0:4317
      - COLLECTOR_OTLP_HTTP_HOST_PORT=0.0.0.0:4318
    ports:
      - "6831:6831/udp"
      - "6832:6832/udp"
      - "5778:5778"
      - "14268:14268"
      - "14250:14250"
      - "9411:9411"
      - "16686:16686"
      - "14269:14269"
      - "4317:4317"
      - "4318:4318"
    networks:
      - elk-network
      - monitoring-network
    depends_on:
      elasticsearch:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:14269/ || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 10
      start_period: 120s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'

  # Additional services like node-exporter, cadvisor, frontend, etc. remain unchanged here
  # ... (include other services as needed)

networks:
  devsecops-network:
    driver: bridge
  elk-network:
    driver: bridge
  monitoring-network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
  elasticsearch_data:
    driver: local
  logstash_data:
    driver: local
  kibana_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  pgadmin_data:
    driver: local
